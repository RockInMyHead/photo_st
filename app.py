import streamlit as st
import pandas as pd
import numpy as np
from pathlib import Path
from PIL import Image, ImageOps
import cv2
from tqdm import tqdm
from sklearn.cluster import DBSCAN
import insightface
from insightface.app import FaceAnalysis
import shutil
import os
import tempfile
import base64
import io
from dataclasses import dataclass
import time

# Import functions from photo_cluster_router.py
from photo_cluster_router import (
    FaceRec, Embedder, collect_faces, cluster_faces,
    route_by_clusters, is_image, ensure_dir, load_bgr,
    laplacian_variance, center_crop_square
)

# Page configuration
st.set_page_config(
    page_title="FaceSort - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ –ª–∏—Ü–∞–º",
    page_icon="üì∏",
    layout="wide"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1f77b4;
        font-size: 2.5em;
        margin-bottom: 1em;
    }
    .sub-header {
        text-align: center;
        color: #666;
        font-size: 1.2em;
        margin-bottom: 2em;
    }
    .result-card {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        background-color: #f9f9f9;
    }
    .person-card {
        border: 2px solid #1f77b4;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        background-color: #e8f4f8;
    }
</style>
""", unsafe_allow_html=True)

def cleanup_old_temp_files():
    """Clean up old temporary files (older than 7 days)"""
    try:
        user_home = Path.home()
        temp_base_dir = user_home / "FaceSort_Temp"

        if temp_base_dir.exists():
            import datetime
            cutoff_date = datetime.datetime.now() - datetime.timedelta(days=7)

            for temp_dir in temp_base_dir.iterdir():
                if temp_dir.is_dir():
                    try:
                        # Check if directory is old enough to delete
                        stat = temp_dir.stat()
                        dir_date = datetime.datetime.fromtimestamp(stat.st_mtime)

                        if dir_date < cutoff_date:
                            import shutil
                            shutil.rmtree(temp_dir)
                            print(f"Cleaned up old temp directory: {temp_dir}")
                    except Exception as e:
                        print(f"Failed to clean up {temp_dir}: {e}")
    except Exception as e:
        print(f"Error during temp file cleanup: {e}")

def main():
    st.markdown('<h1 class="main-header">üì∏ FaceSort</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º –ª–∏—Ü–∞–º</p>', unsafe_allow_html=True)

    # Clean up old temporary files on startup
    cleanup_old_temp_files()

    # Initialize default parameters if not set
    if 'params' not in st.session_state:
        st.session_state.params = {
            'eps_sim': 0.55,
            'min_samples': 2,
            'min_face': 110,
            'blur_thr': 45.0,
            'group_thr': 3,
            'det_size': 640,
            'gpu_id': 0
        }

    # Create tabs
    tab1, tab2, tab3, tab4 = st.tabs(["üóÇÔ∏è –ü—Ä–æ–≤–æ–¥–Ω–∏–∫", "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"])

    with tab1:
        show_upload_tab()

    with tab2:
        show_parameters_tab()

    with tab3:
        show_processing_tab()

    with tab4:
        show_results_tab()

def show_upload_tab():
    # Initialize queue if not exists
    if 'processing_queue' not in st.session_state:
        st.session_state.processing_queue = []
    if 'current_processing' not in st.session_state:
        st.session_state.current_processing = None
    if 'processing_status' not in st.session_state:
        st.session_state.processing_status = "idle"  # idle, processing, paused

    # Show queue status if there are items
    if st.session_state.processing_queue or st.session_state.current_processing:
        show_processing_queue()

    # Show only the file explorer
    show_file_explorer()

def show_file_uploader():
    """Show traditional file uploader interface"""
    st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")

    uploaded_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
        type=['jpg', 'jpeg', 'png', 'bmp', 'webp'],
        accept_multiple_files=True,
        help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å –ø–∞–ø–∫—É"
    )

    if uploaded_files:
        process_uploaded_files(uploaded_files)

def show_folder_input():
    """Show folder path input interface with folder picker"""
    st.subheader("üìÅ –í—ã–±–æ—Ä –ø–∞–ø–∫–∏")

    # Main action button
    if st.button("üìÇ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫", type="primary", width="stretch"):
        show_folder_picker_instructions()

    # Alternative: Manual path input
    st.markdown("---")
    st.markdown("**–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é:**")

    folder_path = st.text_input(
        "–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:",
        placeholder="C:/Users/YourName/Pictures/ –∏–ª–∏ /home/user/photos/",
        help="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"
    )

    if st.button("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", width="stretch"):
        if folder_path:
            scan_folder_for_images(folder_path)
        else:
            st.warning("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ")

    # Quick access to common folders
    st.markdown("---")
    st.markdown("**–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø:**")

    quick_folders = get_quick_paths()
    if quick_folders:
        # Show only first 4 quick folders
        quick_cols = st.columns(2)
        quick_items = list(quick_folders.items())[:4]

        for i, (name, path) in enumerate(quick_items):
            with quick_cols[i % 2]:
                if st.button(f"üìÅ {name}", key=f"quick_scan_{i}", width="stretch"):
                    # Update both paths and set as selected
                    st.session_state.explorer_path = path
                    st.session_state.explorer_selected = path
                    st.rerun()

def show_folder_picker_instructions():
    """Show folder selection with direct system dialog"""
    st.markdown("### üìÇ –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫")

    # Main folder picker buttons
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### üíª –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫")
        st.info("**–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ Windows/Linux/Mac**")

        if st.button("üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫", type="primary", width="stretch", key="system_picker_main"):
            folder_path = open_system_folder_picker()
            if folder_path:
                st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: `{folder_path}`")

                # Count images immediately
                total_images = count_images_in_folder(Path(folder_path))
                st.info(f"üìä –í –ø–∞–ø–∫–µ –Ω–∞–π–¥–µ–Ω–æ {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

                # Auto-scan the folder
                if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary", key="auto_scan_selected"):
                    scan_folder_for_images(folder_path)
            else:
                st.warning("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    with col2:
        st.markdown("#### üåê –ß–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä")
        st.info("**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä**")

        # JavaScript for automatic file dialog
        st.markdown("""
        <script>
        function openBrowserFileDialog() {
            const fileInput = document.querySelector('input[type="file"][key="browser_folder_picker"]');
            if (fileInput) {
                fileInput.click();
            }
        }
        </script>
        """, unsafe_allow_html=True)

        if st.button("üìÇ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏", key="browser_picker_main"):
            # Trigger JavaScript to open file dialog
            st.markdown("""
            <script>
            openBrowserFileDialog();
            </script>
            """, unsafe_allow_html=True)

    st.markdown("---")

    # Hidden file uploader for browser-based selection
    uploaded_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏:",
        type=['jpg', 'jpeg', 'png', 'bmp', 'webp', 'tif', 'tiff'],
        accept_multiple_files=True,
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏",
        key="browser_folder_picker",
        label_visibility="collapsed"
    )

    if uploaded_files:
        st.markdown("### üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–±–æ—Ä–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä")

        # Extract folder path from uploaded files
        file_paths = [Path(uploaded_file.name) for uploaded_file in uploaded_files]

        if len(file_paths) > 0:
            common_path = file_paths[0].parent
            for path in file_paths[1:]:
                common_path = find_common_parent(common_path, path.parent)

            folder_path = str(common_path)
            st.success(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: `{folder_path}`")

            # Show preview of selected files
            st.markdown(f"**–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:** {len(uploaded_files)}")
            preview_cols = st.columns(min(4, len(uploaded_files)))
            for i, uploaded_file in enumerate(uploaded_files[:4]):
                with preview_cols[i]:
                    try:
                        image = Image.open(uploaded_file)
                        image.thumbnail((100, 100))
                        st.image(image, caption=uploaded_file.name[:20], width="stretch")
                    except:
                        st.text(f"üìÑ {uploaded_file.name[:20]}")

            if len(uploaded_files) > 4:
                st.info(f"–ò –µ—â—ë {len(uploaded_files) - 4} —Ñ–∞–π–ª–æ–≤...")

            # Count total images in the detected folder
            total_images = count_images_in_folder(common_path)
            st.info(f"üìä –í –ø–∞–ø–∫–µ –Ω–∞–π–¥–µ–Ω–æ {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Å–µ–≥–æ")

            # Action buttons
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É", type="primary", key="process_detected_folder"):
                    scan_folder_for_images(folder_path)
            with col2:
                if st.button("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã", key="reset_selection"):
                    st.rerun()

def open_system_folder_picker():
    """Open system folder picker dialog (works only locally)"""
    try:
        import platform
        system = platform.system()

        if system == "Windows":
            # Windows folder picker using tkinter
            try:
                import tkinter as tk
                from tkinter import filedialog

                root = tk.Tk()
                root.withdraw()
                root.attributes('-topmost', True)

                folder_path = filedialog.askdirectory(
                    title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏",
                    initialdir=str(Path.home())
                )

                root.destroy()
                return folder_path if folder_path else None

            except ImportError:
                st.warning("‚ö†Ô∏è tkinter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ tkinter –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫.")
                return None

        elif system == "Linux":
            # Linux folder picker using zenity
            try:
                import subprocess
                result = subprocess.run(
                    ['zenity', '--file-selection', '--directory',
                     '--title=–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏'],
                    capture_output=True, text=True
                )
                if result.returncode == 0:
                    return result.stdout.strip()
                return None
            except FileNotFoundError:
                st.warning("‚ö†Ô∏è zenity –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ zenity –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥.")
                return None

        elif system == "Darwin":  # macOS
            # macOS folder picker using AppleScript
            try:
                import subprocess
                script = '''
                tell application "Finder"
                    activate
                    set theFolder to choose folder with prompt "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:"
                    return POSIX path of theFolder
                end tell
                '''
                result = subprocess.run(
                    ['osascript', '-e', script],
                    capture_output=True, text=True
                )
                if result.returncode == 0:
                    return result.stdout.strip()
                return None
            except FileNotFoundError:
                st.warning("‚ö†Ô∏è osascript –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏.")
                return None

        else:
            st.warning(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è {system}")
            return None

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞: {e}")
        return None

def find_common_parent(path1, path2):
    """Find common parent directory between two paths"""
    try:
        # Convert to Path objects if they're strings
        if isinstance(path1, str):
            path1 = Path(path1)
        if isinstance(path2, str):
            path2 = Path(path2)

        # Find common parts
        parts1 = path1.parts
        parts2 = path2.parts

        common_parts = []
        for p1, p2 in zip(parts1, parts2):
            if p1 == p2:
                common_parts.append(p1)
            else:
                break

        if common_parts:
            return Path(*common_parts)
        else:
            # Return the shorter path as fallback
            return min(path1, path2, key=lambda p: len(str(p)))
    except:
        return path1  # Return first path as fallback

def show_processing_queue():
    """Show processing queue status"""
    st.subheader("üìã –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    # Current processing status
    if st.session_state.current_processing:
        current_folder = Path(st.session_state.current_processing)
        col1, col2, col3 = st.columns([2, 1, 1])

        with col1:
            if st.session_state.processing_status == "processing":
                st.success(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {current_folder.name}")
            elif st.session_state.processing_status == "paused":
                st.warning(f"‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {current_folder.name}")
            else:
                st.info(f"‚è≥ –û–∂–∏–¥–∞–µ—Ç: {current_folder.name}")

        with col2:
            if st.session_state.processing_status == "processing":
                if st.button("‚è∏Ô∏è –ü–∞—É–∑–∞", key="pause_processing"):
                    st.session_state.processing_status = "paused"
                    st.rerun()
            elif st.session_state.processing_status == "paused":
                if st.button("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", key="resume_processing"):
                    st.session_state.processing_status = "processing"
                    st.rerun()

        with col3:
            if st.button("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", key="stop_processing"):
                st.session_state.processing_status = "idle"
                st.session_state.current_processing = None
                st.rerun()

    # Queue list
    if st.session_state.processing_queue:
        st.markdown("**üìù –í –æ—á–µ—Ä–µ–¥–∏:**")

        for i, folder_path in enumerate(st.session_state.processing_queue):
            folder = Path(folder_path)
            col1, col2, col3 = st.columns([3, 1, 1])

            with col1:
                image_count = count_images_in_folder(folder)
                st.info(f"üìÅ {folder.name} ({image_count} —Ñ–æ—Ç–æ)")

            with col2:
                st.write(f"#{i+1}")

            with col3:
                if st.button("‚ùå", key=f"remove_{i}", help=f"–£–¥–∞–ª–∏—Ç—å {folder.name} –∏–∑ –æ—á–µ—Ä–µ–¥–∏"):
                    st.session_state.processing_queue.pop(i)
                    st.rerun()

        # Control buttons
        col1, col2, col3 = st.columns([1, 1, 1])
        with col1:
            if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", key="start_queue") and st.session_state.processing_status != "processing":
                start_queue_processing()
        with col2:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", key="clear_queue"):
                st.session_state.processing_queue = []
                st.rerun()
        with col3:
            if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", key="show_results"):
                pass  # Results will be shown in the Results tab

def count_images_in_folder(folder_path):
    """Count image files in folder recursively"""
    try:
        image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.webp', '.tif', '.tiff'}
        count = 0
        for file_path in folder_path.rglob('*'):
            if file_path.is_file() and file_path.suffix.lower() in image_extensions:
                count += 1
        return count
    except:
        return 0

def add_to_queue(folder_path):
    """Add folder to processing queue"""
    if folder_path not in st.session_state.processing_queue:
        st.session_state.processing_queue.append(folder_path)
        st.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {Path(folder_path).name}")

        # Add to logs
        if 'processing_logs' not in st.session_state:
            st.session_state.processing_logs = []
        st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {Path(folder_path).name}")
    else:
        st.warning("‚ö†Ô∏è –≠—Ç–∞ –ø–∞–ø–∫–∞ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏")

def start_queue_processing():
    """Start processing the queue"""
    if st.session_state.processing_queue:
        st.session_state.current_processing = st.session_state.processing_queue[0]
        st.session_state.processing_status = "processing"
        st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] ‚ñ∂Ô∏è –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ({len(st.session_state.processing_queue)} –ø–∞–ø–æ–∫)")
        st.rerun()

def process_next_in_queue():
    """Process next item in queue"""
    if st.session_state.current_processing and st.session_state.current_processing in st.session_state.processing_queue:
        # Remove completed item from queue
        st.session_state.processing_queue.remove(st.session_state.current_processing)
        st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {Path(st.session_state.current_processing).name}")

    # Check if there are more items to process
    if st.session_state.processing_queue and st.session_state.processing_status == "processing":
        next_folder = st.session_state.processing_queue[0]
        st.session_state.current_processing = next_folder
        st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–ø–∫–µ: {Path(next_folder).name}")

        # Auto-scan and process next folder
        st.session_state.auto_process_current = True
        scan_folder_for_images(next_folder)
        # Processing will continue automatically
    else:
        # Queue completed
        st.session_state.current_processing = None
        st.session_state.processing_status = "idle"
        # Reset processing state when queue is completed
        st.session_state.processing_state = 'completed'
        if 'processing_logs' in st.session_state:
            st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        st.rerun()

def show_file_explorer():
    """Show simplified and user-friendly file explorer interface"""
    # Initialize session state for file explorer
    if 'explorer_path' not in st.session_state:
        st.session_state.explorer_path = str(Path.home())
    if 'explorer_history' not in st.session_state:
        st.session_state.explorer_history = []
    if 'explorer_selected' not in st.session_state:
        st.session_state.explorer_selected = None

    # Main folder selection - the primary action
    st.markdown("### üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏")

    # Single prominent button for folder selection
    if st.button("üîç –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É —á–µ—Ä–µ–∑ Windows –ø—Ä–æ–≤–æ–¥–Ω–∏–∫", type="primary", use_container_width=True):
        folder_path = open_system_folder_picker()
        if folder_path:
            st.session_state.explorer_path = folder_path
            st.session_state.explorer_selected = folder_path
            st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {Path(folder_path).name}")
            st.rerun()

    # Show selected folder and its contents
    if st.session_state.explorer_selected and Path(st.session_state.explorer_selected).is_dir():
        current_path = Path(st.session_state.explorer_selected)

        # Folder info
        st.markdown("---")
        col1, col2 = st.columns([3, 1])

        with col1:
            st.markdown(f"**üìÅ {current_path.name}**")
            st.text(str(current_path))

        with col2:
            # Count images in folder
            try:
                image_count = sum(1 for f in current_path.rglob('*')
                                if f.is_file() and f.suffix.lower() in {'.jpg', '.jpeg', '.png', '.bmp', '.webp', '.tif', '.tiff'})
                st.metric("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", image_count)
            except:
                st.metric("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", "N/A")

        # Simple navigation
        st.markdown("### üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏")

        # Quick navigation buttons
        nav_col1, nav_col2, nav_col3 = st.columns([1, 1, 4])

        with nav_col1:
            if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", disabled=len(st.session_state.explorer_history) == 0):
                if st.session_state.explorer_history:
                    prev_path = st.session_state.explorer_history.pop()
                    st.session_state.explorer_path = prev_path
                    st.session_state.explorer_selected = prev_path
                    st.rerun()

        with nav_col2:
            if st.button("üìÅ ..", help="–í–≤–µ—Ä—Ö –Ω–∞ —É—Ä–æ–≤–µ–Ω—å"):
                parent_path = current_path.parent
                if parent_path != current_path:
                    st.session_state.explorer_history.append(str(current_path))
                    st.session_state.explorer_path = str(parent_path)
                    st.session_state.explorer_selected = str(parent_path)
                    st.rerun()

        # Show folder contents in a simple list
        show_simple_folder_contents(current_path)

        # Action buttons at the bottom
        st.markdown("---")

        action_col1, action_col2 = st.columns(2)

        with action_col1:
            if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", use_container_width=True):
                add_to_queue(st.session_state.explorer_selected)
                st.success("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏!")

        with action_col2:
            if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary", use_container_width=True):
                # First scan the folder for images
                scan_folder_for_images(st.session_state.explorer_selected)
                # Then immediately start processing
                if st.session_state.get('uploaded_files'):
                    st.session_state.auto_start_processing = True
                    st.success("‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É 'üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞'")
                    st.info("üí° –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

    else:
        # Initial state - no folder selected
        st.info("üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏")

        # Show some quick tips
        with st.expander("üí° –°–æ–≤–µ—Ç—ã –ø–æ –≤—ã–±–æ—Ä—É –ø–∞–ø–∫–∏"):
            st.markdown("""
            - –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, BMP, WebP, TIF
            - –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞–π–¥–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            - –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é –ø–∞–ø–∫—É –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
            """)

def show_simple_folder_contents(current_path):
    """Show folder contents in a simple, user-friendly way"""
    try:
        items = list(current_path.iterdir())
        folders = [item for item in items if item.is_dir() and not item.name.startswith('.')]
        files = [item for item in items if item.is_file()]

        # Sort folders and files
        folders.sort()
        files.sort()

        # Show folders first
        if folders:
            st.markdown("**–ü–∞–ø–∫–∏:**")
            folder_cols = st.columns(min(3, len(folders)))

            for i, folder in enumerate(folders[:3]):  # Show first 3 folders
                with folder_cols[i]:
                    if st.button(f"üìÅ {folder.name}", key=f"simple_folder_{folder}",
                               help=f"–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {folder.name}"):
                        st.session_state.explorer_history.append(str(current_path))
                        st.session_state.explorer_path = str(folder)
                        st.session_state.explorer_selected = str(folder)
                        st.rerun()

            if len(folders) > 3:
                st.text(f"... –∏ –µ—â—ë {len(folders) - 3} –ø–∞–ø–æ–∫")

        # Show files (images prioritized)
        image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.webp', '.tif', '.tiff'}
        image_files = [file for file in files if file.suffix.lower() in image_extensions]
        other_files = [file for file in files if file.suffix.lower() not in image_extensions]

        if image_files:
            st.markdown(f"**–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({len(image_files)}):**")

            # Show first few images as thumbnails
            preview_images = image_files[:6]  # Show first 6 images
            image_cols = st.columns(3)

            for i, img_file in enumerate(preview_images):
                with image_cols[i % 3]:
                    try:
                        image = Image.open(img_file)
                        # Create small thumbnail
                        image.thumbnail((100, 100))
                        st.image(image, caption=img_file.name[:15] + "..." if len(img_file.name) > 15 else img_file.name)
                    except Exception:
                        st.write("üñºÔ∏è")
                        st.caption(img_file.name[:12] + "..." if len(img_file.name) > 12 else img_file.name)

            if len(image_files) > 6:
                st.text(f"... –∏ –µ—â—ë {len(image_files) - 6} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")

        if other_files:
            st.markdown(f"**–î—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã ({len(other_files)}):**")
            other_cols = st.columns(2)

            for i, other_file in enumerate(other_files[:4]):  # Show first 4 other files
                with other_cols[i % 2]:
                    file_icon = get_file_icon(other_file.suffix.lower())
                    st.write(f"{file_icon} {other_file.name}")

            if len(other_files) > 4:
                st.text(f"... –∏ –µ—â—ë {len(other_files) - 4} —Ñ–∞–π–ª–æ–≤")

        if not folders and not files:
            st.info("üìÇ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞")

    except PermissionError:
        st.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")

def show_folder_tree(current_path):
    """Show folder tree navigation"""
    # No header - cleaner interface

    try:
        # Show parent directories
        parent_path = current_path.parent
        if parent_path != current_path:
            col1, col2 = st.columns([3, 1])
            with col1:
                if st.button(f"üìÅ .. (–≤–≤–µ—Ä—Ö)", key=f"parent_{parent_path}"):
                    # Update both paths and history
                    st.session_state.explorer_history.append(str(current_path))
                    st.session_state.explorer_path = str(parent_path)
                    st.session_state.explorer_selected = str(parent_path)
                    st.rerun()
            with col2:
                if st.button("üîô", key=f"back_{parent_path}", help="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"):
                    if st.session_state.explorer_history:
                        prev_path = st.session_state.explorer_history.pop()
                        st.session_state.explorer_path = prev_path
                        st.session_state.explorer_selected = prev_path
                        st.rerun()

        # Show subdirectories
        for item in sorted(current_path.iterdir()):
            if item.is_dir() and not item.name.startswith('.'):
                is_selected = str(item) == st.session_state.explorer_selected
                button_text = f"üìÅ {item.name}"
                if is_selected:
                    button_text = f"‚ñ∂Ô∏è {item.name}"

                if st.button(button_text, key=f"dir_{item}"):
                    st.session_state.explorer_history.append(str(current_path))
                    st.session_state.explorer_path = str(item)
                    st.session_state.explorer_selected = str(item)
                    st.rerun()

    except PermissionError:
        st.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_folder_contents(current_path):
    """Show contents of selected folder"""
    # No header - cleaner interface

    try:
        items = list(current_path.iterdir())
        folders = [item for item in items if item.is_dir() and not item.name.startswith('.')]
        files = [item for item in items if item.is_file()]

        # Sort folders and files
        folders.sort()
        files.sort()

        # Show folders first
        for folder in folders:
            is_selected = str(folder) == st.session_state.explorer_selected
            col1, col2 = st.columns([3, 1])

            with col1:
                if st.button(f"üìÅ {folder.name}", key=f"content_dir_{folder}",
                           help=f"–†–∞–∑–º–µ—Ä: {get_folder_size(folder)} —Ñ–∞–π–ª–æ–≤"):
                    st.session_state.explorer_selected = str(folder)
                    st.rerun()

            with col2:
                if is_selected:
                    st.success("‚úÖ")

        # Show all files in a compact grid
        image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.webp', '.tif', '.tiff'}
        
        # Separate image files and other files
        image_files = [file for file in files if file.suffix.lower() in image_extensions]
        other_files = [file for file in files if file.suffix.lower() not in image_extensions]

        # Combine all files but prioritize images
        all_files = sorted(image_files + other_files, key=lambda x: (x.suffix.lower() not in image_extensions, x.name.lower()))

        if all_files:
            st.markdown("**üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:**")

            # Show files in a compact grid (6 columns for better space usage)
            cols = st.columns(6)

            for i, file in enumerate(all_files[:24]):  # Show first 24 items
                with cols[i % 6]:
                    file_path = Path(file)

                    # Create a container for each file item
                    with st.container():
                        # For image files, show thumbnail
                        if file_path.suffix.lower() in image_extensions:
                            try:
                                image = Image.open(file_path)

                                # Create very small thumbnail (60x60)
                                try:
                                    image.thumbnail((60, 60), Image.Resampling.LANCZOS)
                                except AttributeError:
                                    # For older PIL versions
                                    image.thumbnail((60, 60), Image.ANTIALIAS)

                                # Ensure image has consistent format and add small border
                                if image.mode != 'RGB':
                                    image = image.convert('RGB')

                                # Add subtle padding/border effect
                                image = ImageOps.expand(image, border=1, fill='white')

                                st.image(image, width="stretch")

                                # Small caption
                                st.caption(file_path.name[:15] + "..." if len(file_path.name) > 15 else file_path.name)

                            except Exception as e:
                                # If image can't be loaded, show icon
                                st.write("üñºÔ∏è")
                                st.caption(file_path.name[:12] + "..." if len(file_path.name) > 12 else file_path.name)

                        else:
                            # For non-image files, show file icon
                            file_icon = get_file_icon(file_path.suffix.lower())
                            st.write(file_icon)
                            st.caption(file_path.name[:12] + "..." if len(file_path.name) > 12 else file_path.name)

            if len(all_files) > 24:
                st.info(f"üìÑ –ò –µ—â—ë {len(all_files) - 24} —Ñ–∞–π–ª–æ–≤...")
        else:
            st.info("üìÇ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞")

    except PermissionError:
        st.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def get_quick_paths():
    """Get quick access paths based on OS"""
    import platform
    system = platform.system()

    paths = {}

    if system == "Windows":
        # Windows paths
        user_home = Path.home()
        paths.update({
            "üì∏ –ú–æ–∏ —Ñ–æ—Ç–æ": str(user_home / "Pictures"),
            "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã": str(user_home / "Documents"),
            "üìÇ –ó–∞–≥—Ä—É–∑–∫–∏": str(user_home / "Downloads"),
            "üíª –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª": str(user_home / "Desktop"),
        })

        # Add drives if accessible
        try:
            import string
            for drive_letter in string.ascii_uppercase:
                drive_path = f"{drive_letter}:\\"
                if Path(drive_path).exists():
                    paths[f"üíæ –î–∏—Å–∫ {drive_letter}"] = drive_path
        except:
            pass

    else:
        # Unix/Linux/Mac paths
        user_home = Path.home()
        paths.update({
            "üè† –î–æ–º–∞—à–Ω—è—è": str(user_home),
            "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è": str(user_home / "Pictures"),
            "üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã": str(user_home / "Documents"),
            "üì• –ó–∞–≥—Ä—É–∑–∫–∏": str(user_home / "Downloads"),
            "üñ•Ô∏è –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª": str(user_home / "Desktop"),
        })

        # Add common system paths
        common_paths = ["/home", "/usr/share", "/opt", "/media", "/mnt"]
        for common_path in common_paths:
            if Path(common_path).exists():
                paths[f"üìÅ {common_path.split('/')[-1].title()}"] = common_path

    # Filter existing paths
    return {name: path for name, path in paths.items() if Path(path).exists()}

def get_file_icon(extension):
    """Get emoji icon for file extension"""
    icon_map = {
        # Images
        '.jpg': 'üñºÔ∏è', '.jpeg': 'üñºÔ∏è', '.png': 'üñºÔ∏è', '.bmp': 'üñºÔ∏è', '.webp': 'üñºÔ∏è',
        '.tif': 'üñºÔ∏è', '.tiff': 'üñºÔ∏è', '.gif': 'üñºÔ∏è', '.svg': 'üñºÔ∏è',
        
        # Documents
        '.pdf': 'üìÑ', '.doc': 'üìÑ', '.docx': 'üìÑ', '.txt': 'üìÑ', '.rtf': 'üìÑ',
        '.odt': 'üìÑ', '.pages': 'üìÑ',
        
        # Spreadsheets
        '.xls': 'üìä', '.xlsx': 'üìä', '.csv': 'üìä', '.ods': 'üìä', '.numbers': 'üìä',
        
        # Presentations
        '.ppt': 'üìΩÔ∏è', '.pptx': 'üìΩÔ∏è', '.key': 'üìΩÔ∏è', '.odp': 'üìΩÔ∏è',
        
        # Archives
        '.zip': 'üì¶', '.rar': 'üì¶', '.7z': 'üì¶', '.tar': 'üì¶', '.gz': 'üì¶',
        
        # Audio
        '.mp3': 'üéµ', '.wav': 'üéµ', '.flac': 'üéµ', '.aac': 'üéµ', '.ogg': 'üéµ',
        
        # Video
        '.mp4': 'üé¨', '.avi': 'üé¨', '.mkv': 'üé¨', '.mov': 'üé¨', '.wmv': 'üé¨',
        
        # Code
        '.py': 'üêç', '.js': 'üìú', '.html': 'üåê', '.css': 'üé®', '.java': '‚òï',
        '.cpp': '‚öôÔ∏è', '.c': '‚öôÔ∏è', '.php': 'üêò', '.sql': 'üóÑÔ∏è',
        
        # Default
        '': 'üìÑ'
    }
    
    return icon_map.get(extension.lower(), 'üìÑ')

def get_file_info(file_path):
    """Get detailed file information"""
    try:
        stat = file_path.stat()
        size = stat.st_size
        modified = stat.st_mtime

        # Format size
        if size < 1024:
            size_str = f"{size} B"
        elif size < 1024 * 1024:
            size_str = f"{size / 1024:.1f} KB"
        elif size < 1024 * 1024 * 1024:
            size_str = f"{size / (1024 * 1024):.1f} MB"
        else:
            size_str = f"{size / (1024 * 1024 * 1024):.1f} GB"

        # Format date
        from datetime import datetime
        date_str = datetime.fromtimestamp(modified).strftime("%d.%m.%Y %H:%M")

        return size_str, date_str
    except:
        return "N/A", "N/A"

def get_folder_size(folder_path):
    """Get approximate folder size (file count)"""
    try:
        return len(list(folder_path.rglob('*')))
    except:
        return 0

def show_processing_logs():
    """Show processing logs"""
    st.subheader("üìù –õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    if 'processing_logs' not in st.session_state:
        st.session_state.processing_logs = []

    # Show logs in a scrollable container
    with st.container():
        if st.session_state.processing_logs:
            # Show last 20 logs, most recent first
            recent_logs = st.session_state.processing_logs[-20:][::-1]

            for log_entry in recent_logs:
                # Color code different types of messages
                if "‚ùå" in log_entry:
                    st.error(log_entry)
                elif "‚úÖ" in log_entry:
                    st.success(log_entry)
                elif "üöÄ" in log_entry or "‚ñ∂Ô∏è" in log_entry:
                    st.info(log_entry)
                elif "üìä" in log_entry or "üìÅ" in log_entry:
                    st.write(f"üìä {log_entry}")
                else:
                    st.write(log_entry)
        else:
            st.info("‚ÑπÔ∏è –õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã")

        # Clear logs button
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", key="clear_logs"):
            st.session_state.processing_logs = []
            st.rerun()

def scan_folder_for_images(folder_path):
    """Scan folder and subfolders for images"""
    try:
        folder = Path(folder_path)
        if not folder.exists():
            st.error(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder_path}")
            return

        if not folder.is_dir():
            st.error(f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: {folder_path}")
            return

        # Find all image files recursively
        image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.webp', '.tif', '.tiff'}
        image_files = []

        for file_path in folder.rglob('*'):
            if file_path.is_file() and file_path.suffix.lower() in image_extensions:
                image_files.append(file_path)

        if not image_files:
            st.warning(f"‚ö†Ô∏è –í –ø–∞–ø–∫–µ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏")
            return

        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–∞–ø–∫–µ")

        # Add to processing logs
        if 'processing_logs' not in st.session_state:
            st.session_state.processing_logs = []
        st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] üîç –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ {folder.name}")

        # Copy files to temp directory for processing
        if 'temp_dir' not in st.session_state:
            # Use user's home directory for temp files instead of system temp
            user_home = Path.home()
            temp_base_dir = user_home / "FaceSort_Temp"
            temp_base_dir.mkdir(exist_ok=True)

            import datetime
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            st.session_state.temp_dir = str(temp_base_dir / f"temp_{timestamp}")

        temp_dir = Path(st.session_state.temp_dir)
        temp_dir.mkdir(exist_ok=True)

        # Clear previous files
        for file_path in temp_dir.glob("*"):
            if file_path.is_file():
                file_path.unlink()

        # Copy found images to temp directory
        copied_files = []
        for src_file in image_files:
            dst_file = temp_dir / f"{src_file.stem}_{hash(str(src_file))}{src_file.suffix}"
            try:
                shutil.copy2(src_file, dst_file)
                copied_files.append(dst_file)
            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å {src_file.name}: {e}")
                st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {src_file.name}")

        st.session_state.uploaded_files = copied_files
        st.session_state.input_dir = temp_dir

        # Show preview of found images
        show_image_preview(copied_files, f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –ø–∞–ø–∫–µ {folder.name}")

        # Auto-start processing if called from queue
        if st.session_state.get('auto_process_current', False):
            st.session_state.auto_process_current = False
            st.session_state.auto_start_processing = True
            # Processing will start automatically when user switches to Processing tab

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")

def process_uploaded_files(uploaded_files):
    """Process uploaded files and prepare them for analysis"""
    if 'temp_dir' not in st.session_state:
        # Use user's home directory for temp files instead of system temp
        user_home = Path.home()
        temp_base_dir = user_home / "FaceSort_Temp"
        temp_base_dir.mkdir(exist_ok=True)

        import datetime
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        st.session_state.temp_dir = str(temp_base_dir / f"upload_{timestamp}")

    temp_dir = Path(st.session_state.temp_dir)
    temp_dir.mkdir(exist_ok=True)

    # Clear previous files
    for file_path in temp_dir.glob("*"):
        if file_path.is_file():
            file_path.unlink()

    # Save uploaded files
    saved_files = []
    for uploaded_file in uploaded_files:
        file_path = temp_dir / uploaded_file.name
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        saved_files.append(file_path)

    st.session_state.uploaded_files = saved_files
    st.session_state.input_dir = temp_dir

    # Display success message and file count
    st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(saved_files)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")

    # Show preview
    show_image_preview(saved_files, "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

def show_image_preview(image_files, title):
    """Show preview of images with start processing button"""
    if not image_files:
        return

    st.subheader(f"üì∏ {title}")

    # Show first 6 images
    preview_files = image_files[:6]
    cols = st.columns(3)

    for i, file_path in enumerate(preview_files):
        with cols[i % 3]:
            try:
                image = Image.open(file_path)
                # Resize for preview
                image.thumbnail((200, 200))
                st.image(image, caption=file_path.name, width="stretch")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path.name}: {e}")

    if len(image_files) > 6:
        st.info(f"üìÑ –ò –µ—â—ë {len(image_files) - 6} —Ñ–æ—Ç–æ...")

    # Start processing button
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        if st.button("üöÄ –°–¢–ê–†–¢ –û–ë–†–ê–ë–û–¢–ö–ò", type="primary", width="stretch"):
            # Add to logs
            if 'processing_logs' not in st.session_state:
                st.session_state.processing_logs = []
            folder_name = Path(st.session_state.input_dir).name if hasattr(st.session_state, 'input_dir') and st.session_state.input_dir else "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
            st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {folder_name}")

            # Set flag for auto-starting processing
            st.session_state.auto_start_processing = True
            # Processing will start automatically when user switches to Processing tab

def show_parameters_tab():
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    if 'uploaded_files' not in st.session_state:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        return

    st.markdown("""
    –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ª–∏—Ü.
    """)

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        eps_sim = st.slider(
            "–ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –ª–∏—Ü",
            min_value=0.1,
            max_value=0.9,
            value=0.55,
            step=0.05,
            help="–ß–µ–º –º–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º —Å—Ç—Ä–æ–∂–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è"
        )

        min_samples = st.slider(
            "–ú–∏–Ω. –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞",
            min_value=1,
            max_value=5,
            value=2,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ü –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞"
        )

        group_thr = st.slider(
            "–ü–æ—Ä–æ–≥ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ",
            min_value=1,
            max_value=10,
            value=3,
            help="–§–æ—Ç–æ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∏—Ü –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É"
        )

    with col2:
        st.subheader("–§–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞")
        min_face = st.slider(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–∏—Ü–∞ (px)",
            min_value=50,
            max_value=200,
            value=110,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        )

        blur_thr = st.slider(
            "–ü–æ—Ä–æ–≥ —Ä–∞–∑–º—ã—Ç–∏—è",
            min_value=10.0,
            max_value=100.0,
            value=45.0,
            step=5.0,
            help="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–º—ã—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )

    # Store parameters in session state
    st.session_state.params = {
        'eps_sim': eps_sim,
        'min_samples': min_samples,
        'min_face': min_face,
        'blur_thr': blur_thr,
        'group_thr': group_thr,
        'det_size': 640,
        'gpu_id': 0
    }

    st.success("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

def show_processing_tab():
    st.header("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")

    if 'uploaded_files' not in st.session_state:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        st.info("üì§ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return

    # Initialize processing state if not exists
    if 'processing_state' not in st.session_state:
        st.session_state.processing_state = 'idle'  # idle, processing, completed, error

    # Auto-start processing if we came from upload tab
    if 'auto_start_processing' in st.session_state and st.session_state.auto_start_processing:
        st.session_state.auto_start_processing = False
        st.session_state.processing_state = 'processing'
        process_images()
        return

    # Create columns for processing controls and logs
    col1, col2 = st.columns([1, 1])

    with col1:
        st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

        # Show current processing status
        if st.session_state.processing_state == 'processing':
            st.info("üîÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...**")
        elif st.session_state.processing_state == 'completed':
            st.success("‚úÖ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
        elif st.session_state.processing_state == 'error':
            st.error("‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!**")

        # Show parameters summary
        if 'params' in st.session_state:
            params = st.session_state.params
            st.markdown("**üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:**")
            st.info(f"**–ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏:** {params['eps_sim']}")
            st.info(f"**–ú–∏–Ω. –æ–±—Ä–∞–∑—Ü–æ–≤:** {params['min_samples']}")
            st.info(f"**–ì—Ä—É–ø–ø–æ–≤–æ–π –ø–æ—Ä–æ–≥:** {params['group_thr']}")
            st.info(f"**–†–∞–∑–º–µ—Ä –ª–∏—Ü–∞:** {params['min_face']}px")
            st.info(f"**–ü–æ—Ä–æ–≥ —Ä–∞–∑–º—ã—Ç–∏—è:** {params['blur_thr']}")

        # Action buttons based on processing state
        st.markdown("---")

        if st.session_state.processing_state == 'idle':
            # Show start button
            if st.button("üöÄ –ù–ê–ß–ê–¢–¨ –û–ë–†–ê–ë–û–¢–ö–£", type="primary", width="stretch"):
                st.session_state.processing_state = 'processing'
                process_images()
        elif st.session_state.processing_state == 'processing':
            # Show stop button
            if st.button("‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨ –û–ë–†–ê–ë–û–¢–ö–£", type="secondary", width="stretch"):
                st.session_state.processing_state = 'idle'
                st.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                if 'processing_logs' in st.session_state:
                    st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] ‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        elif st.session_state.processing_state in ['completed', 'error']:
            # Show restart button
            if st.button("üîÑ –ù–ê–ß–ê–¢–¨ –ó–ê–ù–û–í–û", type="primary", width="stretch"):
                # Clear previous results
                if 'results' in st.session_state:
                    del st.session_state.results
                st.session_state.processing_state = 'processing'
                process_images()

    with col2:
        show_processing_logs()

def process_images():
    """Process uploaded images using the face clustering algorithm"""
    # Add log entry
    if 'processing_logs' not in st.session_state:
        st.session_state.processing_logs = []

    log_message = f"üöÄ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏: {Path(st.session_state.current_processing or st.session_state.input_dir).name}"
    st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] {log_message}")

    # Set processing state
    st.session_state.processing_state = 'processing'

    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"):

        # Create output directory in user's system
        if 'output_dir' not in st.session_state:
            # Create results folder in user's home directory
            user_home = Path.home()
            results_base_dir = user_home / "FaceSort_Results"

            # Create timestamped subfolder for this processing session
            import datetime
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            folder_name = f"facesort_{timestamp}"

            st.session_state.output_dir = results_base_dir / folder_name
            st.session_state.output_dir.mkdir(parents=True, exist_ok=True)

            # Log the output directory
            st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {st.session_state.output_dir}")
            st.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {st.session_state.output_dir}")

        output_dir = st.session_state.output_dir
        input_dir = st.session_state.input_dir
        params = st.session_state.params

        # Progress bar
        progress_bar = st.progress(0)
        status_text = st.empty()

        try:
            # Step 1: Collect faces
            status_text.text("–®–∞–≥ 1/4: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–∏—Ü –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö...")
            records = collect_faces(
                input_dir,
                min_face=params['min_face'],
                blur_thr=params['blur_thr'],
                det_size=params['det_size'],
                gpu_id=params['gpu_id']
            )
            progress_bar.progress(0.25)

            if not records:
                st.error("‚ùå –ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] ‚ùå –û—à–∏–±–∫–∞: –ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ {Path(st.session_state.current_processing or st.session_state.input_dir).name}")
                return

            # Step 2: Cluster faces
            status_text.text(f"–®–∞–≥ 2/4: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è {len(records)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–∏—Ü...")
            labels = cluster_faces(records, params['eps_sim'], params['min_samples'])
            progress_bar.progress(0.5)
            st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] üìä –ù–∞–π–¥–µ–Ω–æ {len(set(labels))} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ª–∏—Ü")

            # Step 3: Route by clusters
            status_text.text("–®–∞–≥ 3/4: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º...")
            cluster_to_name, report_path, eligible_clusters = route_by_clusters(
                records, labels, output_dir, params['group_thr']
            )
            progress_bar.progress(0.75)
            st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] üìÅ –°–æ–∑–¥–∞–Ω–æ {len(eligible_clusters)} –ø–∞–ø–æ–∫ —Å –ª—é–¥—å–º–∏")

            # Step 4: Finalize
            status_text.text("–®–∞–≥ 4/4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            progress_bar.progress(1.0)

            # Store results in session state
            st.session_state.results = {
                'cluster_to_name': cluster_to_name,
                'eligible_clusters': eligible_clusters,
                'output_dir': output_dir,
                'report_path': report_path,
                'total_faces': len(records),
                'total_images': len(st.session_state.uploaded_files)
            }

            status_text.text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(records)} –ª–∏—Ü –Ω–∞ {len(st.session_state.uploaded_files)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö")
            st.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

            # Log completion
            folder_name = Path(st.session_state.current_processing or st.session_state.input_dir).name
            st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏: {folder_name}")
            st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

            # Set processing state to completed
            st.session_state.processing_state = 'completed'

            # Process next item in queue
            process_next_in_queue()

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            # Set processing state to error
            st.session_state.processing_state = 'error'
            st.session_state.processing_logs.append(f"[{time.strftime('%H:%M:%S')}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            return

def show_results_tab():
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    if 'results' not in st.session_state:
        st.info("‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        return

    results = st.session_state.results
    output_dir = results['output_dir']

    # Show results location and option to open folder
    st.markdown("---")
    col1, col2 = st.columns([3, 1])

    with col1:
        st.markdown(f"**üìÅ –ü–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:** {output_dir}")
        st.markdown("*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∞—à–µ–π –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏*")

    with col2:
        # Button to open results folder (works when running locally)
        if st.button("üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", use_container_width=True):
            try:
                import platform
                system = platform.system()
                if system == "Windows":
                    import subprocess
                    subprocess.run(["explorer", str(output_dir)])
                elif system == "Darwin":  # macOS
                    import subprocess
                    subprocess.run(["open", str(output_dir)])
                else:  # Linux
                    import subprocess
                    subprocess.run(["xdg-open", str(output_dir)])
                st.success("‚úÖ –ü–∞–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!")
            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")
                st.info(f"üìÅ –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ø–∫—É –≤—Ä—É—á–Ω—É—é: {output_dir}")

    st.markdown("---")

    # Summary statistics
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("–í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", results['total_images'])

    with col2:
        st.metric("–ù–∞–π–¥–µ–Ω–æ –ª–∏—Ü", results['total_faces'])

    with col3:
        st.metric("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –ª—é–¥–µ–π", len(results['eligible_clusters']))

    # Display clusters
    st.subheader("üìÅ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ª—é–¥–∏")

    cluster_to_name = results['cluster_to_name']
    eligible_clusters = sorted(results['eligible_clusters'])

    for cluster_id in eligible_clusters:
        person_name = cluster_to_name[cluster_id]
        person_dir = output_dir / person_name

        if person_dir.exists():
            # Get images for this person
            person_images = list(person_dir.glob("*"))

            if person_images:
                with st.expander(f"üë§ {person_name} ({len(person_images)} —Ñ–æ—Ç–æ)", expanded=False):
                    # Display images in a grid
                    cols = st.columns(min(4, len(person_images)))

                    for i, img_path in enumerate(person_images[:4]):  # Show first 4 images
                        with cols[i]:
                            image = Image.open(img_path)
                            st.image(image, caption=Path(img_path).stem, width="stretch")

                    if len(person_images) > 4:
                        st.text(f"... –∏ –µ—â—ë {len(person_images) - 4} —Ñ–æ—Ç–æ")

    # Group photos
    group_dir = output_dir / "__group_only__"
    if group_dir.exists() and list(group_dir.glob("*")):
        group_images = list(group_dir.glob("*"))
        st.subheader(f"üë• –ì—Ä—É–ø–ø–æ–≤—ã–µ —Ñ–æ—Ç–æ ({len(group_images)} —Ñ–æ—Ç–æ)")

        cols = st.columns(min(3, len(group_images)))
        for i, img_path in enumerate(group_images[:3]):
            with cols[i]:
                image = Image.open(img_path)
                st.image(image, caption=Path(img_path).stem, width="stretch")

    # Unknown photos
    unknown_dir = output_dir / "__unknown__"
    if unknown_dir.exists() and list(unknown_dir.glob("*")):
        unknown_images = list(unknown_dir.glob("*"))
        st.subheader(f"‚ùì –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ ({len(unknown_images)} —Ñ–æ—Ç–æ)")

        cols = st.columns(min(3, len(unknown_images)))
        for i, img_path in enumerate(unknown_images[:3]):
            with cols[i]:
                image = Image.open(img_path)
                st.image(image, caption=Path(img_path).stem, width="stretch")

    # Download results
    st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

    # Create zip archive of results
    import zipfile

    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        for root, dirs, files in os.walk(output_dir):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, output_dir)
                zip_file.write(file_path, arcname)

    zip_buffer.seek(0)

    st.download_button(
        label="üì¶ –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (ZIP)",
        data=zip_buffer,
        file_name="facesort_results.zip",
        mime="application/zip",
        width="stretch"
    )

if __name__ == "__main__":
    main()
